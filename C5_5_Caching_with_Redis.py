# С5.5. Кэширование с помощью Redis

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# В этом юните мы будем говорить о кэшировании.
#
# Кэширование — это временное сохранение данных для дальнейшего доступа к ним.
# Воспринимайте кэширование как нечто чуть более серьёзное, чем хранение ваших
# данных в файле, но чуть менее серьёзное, чем хранение ваших данных в полноценных
#  базах. Например, Redis отлично может хранить недавние действия пользователя
# на вашем сайте, какие-то сообщения из онлайн-чата и так далее.
#
# Давайте же перейдём от слов к делу и научимся кэшировать данные с помощью Redis.
#
# Первое, что вам надо будет сделать — это поставить себе Redis.
#
# Это можно сделать несколькими способами. Наиболее удобный, на наш взгляд,
# — воспользоваться облачным сервисом от Redis Labs и хранить ваши данные в облаке.
# Как это сделать, можете посмотреть в видео ниже.
#
# Установка Redis на Windows
#
# Установка Redis на Linux
#
# Если же вы работаете на Mac OS, то процедура будет крайне похожа на процедуру
# на Linux, так как и там, и там Redis легко устанавливается через терминал.
# Однако вы также можете воспользоваться установкой с Windows, так как она немного
# сложнее, но зато подходит для всех платформ, потому как находится в облаке.
#
# Для работы с Redis в Python нужно установить специальную библиотеку:
#
# pip3 install redis.
#
# Теперь, если вы установили Redis себе на компьютер, то дальше ничего делать не
# нужно. А если вы пользовались бесплатным облачным сервисом Redis Labs, то вам
# необходимо будет дополнительно вводить пароль при подключении.
# Пароль можно найти, перейдя в вашу созданную БД и скопировав следующее поле:
#
# Теперь давайте попробуем всё же написать код подключения к нашей базе данных:
#
# import redis # импортируем библиотеку
#
# red = redis.Redis(
#     host=хост,  # ваш хост, если вы поставили Редис к себе на локальную машину, то у вас это будет localhost. Если же вы находитесь на Windows, то воспользуйтесь полем host из вашей облачной БД, которую мы создавали в скринкасте.
#     port=порт,  # порт подключения. На локальной машине это должно быть 6379. Для пользователей облачного сервиса порт всегда разный, поэтому его надо копировать оттуда же, что и host.
#     password=пароль  # для локальной машины пароль не требуется (если вы устанавливали Редис к себе на компьютер и не пользовались облачным сервисом из скринкаста выше). Для пользователей облачного сервиса пароль находится в вашей облачной базе данных в поле password
# )
# Если же вы пользовались облачным сервисом от Redis Labs, то ваше значение host
# будет храниться в поле endpoint до двоеточия, а port — после двоеточия.
#
# И да, обратите внимание, что порт мы указывали целым числом, а не строкой.
#
# Теперь давайте попробуем записать данные в кэш.
# Для этого используется метод: .set(<название переменной для хеширования>,
# <значение переменной в виде строки>).
#
# import redis
#
# red = redis.Redis(
#     host='хост',
#     port=порт,
#     password='пароль'
# )
#
# red.set('var1', 'value1')  # записываем в кэш строку "value1"
# print(red.get('var1'))  # считываем из кэша данные
#
# В результате в консоли мы увидим:
#
# Но на этом ещё не всё. Вся загвоздка здесь в том, что данные нами записанные,
# не зависят от текущей сессии. Они не стираются после того, как скрипт закончит
# работу. Их состояние зависит только от самого хранилища, которое крутится у нас
# в облаке.
#
# Давайте теперь удалим некоторые строчки и убедимся, что данные, которые мы
# записывали в предыдущей сессии, сохранились.
#
# import redis
#
# red = redis.Redis(
#     host='хост',
#     port=порт,
#     password='пароль'
# )
#
# print(red.get('var1'))  # считываем из кэша данные
#
# И вот! Всё тот же результат!
#
# Как видим, строки хранятся отлично. И получать их можно оттуда так же легко.
# Давайте теперь попробуем записать в кэш что-нибудь посложнее, например,
# словарь.
#
# import redis
# import json  # так-так-так, кто это тут у нас? Наш старый друг Джейсон заглянул на огонёк! Ну привет, чем ты сегодня нас порадуешь?
#
# red = redis.Redis(
#     host='хост',
#     port=порт,
#     password='пароль'
# )
#
# dict1 = {'key1': 'value1', 'key2': 'value2'}  # создаём словарь для записи
# red.set('dict1', json.dumps(dict1))  # с помощью функции dumps() из модуля json превратим наш словарь в строчку
# converted_dict = json.loads(red.get('dict1'))  # с помощью знакомой нам функции превращаем данные, полученные из кэша обратно в словарь
# print(type(converted_dict))  # убеждаемся, что мы получили действительно словарь
# print(converted_dict)  # ну и выводим его содержание
#
# Наконец, давайте научимся удалять данные из кэша по ключу. Это делается совсем
# просто.
#
# import redis
# import json
#
# red = redis.Redis(
#     host='хост',
#     port=порт,
#     password='пароль'
# )
#
# red.delete('dict1')  # удаляются ключи с помощью метода .delete()
# print(red.get('dict1'))
#
# Проверяем консоль:
#
# Как итог мы видим, что у нас вывелось None. То есть ключа, который мы добавили,
# больше нет.
#
# Вот и всё. В этом юните мы научились устанавливать Redis, записывать и хранить
# в нём данные, а также считывать и удалять их.
#
# В заключение хотим отметить, что Redis — это довольно мощный инструмент.
# Его, конечно же, не желательно использовать как основную базу данных для
# каких-либо более или менее серьёзных проектов. Дело в том, что сам по себе
# он крайне не структурирован, и чем пытаться закопать в кэш какую-либо
# определённую структуру всех хранимых объектов, легче воспользоваться
# готовыми СУБД, например, PostgreSQL, которые мы будем проходить дальше
# в курсе.
#
# Однако в Redis отлично хранятся данные, которые по своей структуре не похожи
# ни на одну таблицу или же которые надо будет просто периодически считывать
# и забывать про них. Инструмент очень полезный и необычный. Лучше во всяком
# случае, чем хранить данные в файле.
#
# Надеемся, данный юнит был вам полезен, и вы научились кэшировать данные с
# помощью Redis.
#
# 5.5.1
#
# Попробуйте самостоятельно зарегистрироваться на app.redislabs.com.
# Создайте аккаунт с бесплатной подпиской и новую базу данных.
#
# 5.5.2
#
# Сопоставьте методы и их назначения.
# ----------------------|---------------------|----------------------
# |        .delet       |         .set        |         .get        |
# |---------------------|---------------------|---------------------|
# | Принимает один      | Принимает два       | Принимает один      |
# | параметр и удаляет  | параметра и         | параметр и получает |
# | значение из кэша.   | записывает ключ со  | значение из кэша.   |
# |                     | значением в кэш.    |                     |
# ----------------------|---------------------|----------------------
#
# 5.5.3
#
# Какие параметры нужно ОБЯЗАТЕЛЬНО передать при создании объекта
# класса Redis, чтобы можно было подключиться к вашей базе данных?
#
#  * Адрес ссылки на базу данных
#
#  * Хост для подключения к базе данных +++
#
#  * Паспортные данные создателя базы данных
#
#  * Порт для подключения к базе данных +++
#
#  * Пароль при любых условиях, пустую строку если пароля нет
#
#  * Имя базы данных
#
#  * Пароль при наличии его у базы +++
#
#
# 5.5.4
#
# Напишите программу, которая будет записывать и кэшировать номера телефонов
# ваших друзей.
#
# Программа должна уметь воспринимать несколько команд:
#
#
#  * записать номер;
#
#  * показать номер друга в консоли при вводе имени;
#
#  * удалить номер друга по имени.
#
# Кэширование надо производить с помощью Redis. Ввод и вывод информации
# должен быть реализован через консоль (с помощью функций input() и print()).
#
# Решение:
#
# red = redis.Redis(
#     host='ваш хост',
#     port=ваш порт,
#     password=пароль
# )
#
# cont = True
#
# while cont:
#     action = input('action:\t')
#     if action == 'write':
#         name = input('name:\t')
#         phone = input('phone:\t')
#         red.set(name, phone)
#     elif action == 'read':
#         name = input('name:\t')
#         phone = red.get(name)
#         if phone:
#             print(f'{name}\'s phone is {str(phone)}')
#     elif action == 'delete':
#         name = input('name:\t')
#         phone = red.delete(name)
#         if phone:
#             print(f"{name}'s phone is deleted")
#         else:
#             print(f"Not found {name}")
#     elif action == 'stop':
#         break
